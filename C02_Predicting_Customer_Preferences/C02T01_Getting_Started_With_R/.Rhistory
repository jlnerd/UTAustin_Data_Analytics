subplot_cols = 2
subplot_rows = 2
par(mfrow=c(subplot_rows,subplot_cols))
x <- unlist(DatasetName[,x_index])
x_header = column_names[x_index]
for(i in 1:length(column_names)){
y <- unlist(DatasetName[,i])
y_header = column_names[i]
try(hist(y, main = paste(y_header, "Histogram"), xlab = y_header ),silent=TRUE)#Histogram Plot
}
for(i in 1:length(column_names)){
if(i != x_index) {
y <- unlist(DatasetName[,i])
y_header = column_names[i]
try(plot(x,y, xlab = x_header, ylab = y_header),silent=TRUE)  #Scatter (Box) Plot
}
}
#Normal Quantile Plot- is a way to see if your data is normally distributed.
for(i in 1:length(column_names)){
y <- unlist(DatasetName[,i])
y_header = column_names[i]
try(qqnorm(y,main = paste(y_header, " Normal Q-Q Plot")),silent=TRUE) ##Normal Quantile Plot
}
}
plot_summary_of_data(df_cars,x_index=2)
plot_summary_of_data(df_iris,x_index=1)
#DatasetName$ColumnName<-as.typeofdata(DatasetName$ColumnName)
df_cars$"name of car"<-as.factor(df_cars$"name of car")
df_iris$"Species"<-as.factor(df_iris$"Species")
reformat_column_headers <- function(DatasetName){
column_names = names(DatasetName)
column_names_reformated = gsub(" ","_",fixed=TRUE,column_names)
names(DatasetName)<-c(column_names_reformated)
return(DatasetName)
}
df_cars = reformat_column_headers(df_cars)
print(names(df_cars))
df_iris = reformat_column_headers(df_iris)
print(names(df_iris))
summary(df_cars) #Will count how many NA’s you have.
summary(df_iris)
is.na(df_cars) #Will show your NA’s through logical data. (TRUE if it’s missing, FALSE if it’s not.)
na.omit(df_cars)#Drops any rows with missing values and omits them forever.
na.omit(df_iris)
#na.exclude(DatasetName$ColumnName)#Drops any rows with missing values, but keeps track of where they were.
#DatasetName$ColumnName[is.na(DatasetName$ColumnName)]<-mean(DatasetName$ColumnName,na.rm = TRUE)
set.seed(1)
train_test_size<-function(DatasetName,training_size_ratio=0.7){
trainSize<-round(nrow(DatasetName)*training_size_ratio)
testSize<-nrow(DatasetName)-trainSize
df_out = data.frame('trainSize'=c(trainSize),'testSize'=c(testSize))
return(df_out)
}
train_test_size(df_cars,0.7)
train_test_size(df_iris,0.7)
train_test_split<-function(DatasetName,training_size_ratio=0.7){
df_train_test_size <- train_test_size(df_cars,training_size_ratio)  #get train test sizes
trainSize<-df_train_test_size[1,1]
training_indices<-sample(seq_len(nrow(DatasetName)),size = trainSize)
trainSet<-DatasetName[training_indices,]
testSet<-DatasetName[-training_indices,]
return(list(trainSet,testSet))
}
list_df_train_test_sets = train_test_split(df_cars,0.7)
df_trainSet = list_df_train_test_sets[[1]]
print(df_trainSet)
df_testSet = list_df_train_test_sets[[2]]
print(df_testSet)
plot(df_cars$'speed_of_car',df_cars$'distance_of_car',xlab = 'speed_of_car', ylab = 'distance_of_car',main='training+test set')
plot(df_trainSet$'speed_of_car',df_trainSet$'distance_of_car',xlab = 'speed_of_car', ylab = 'distance_of_car',main='df_trainSet')
plot(df_testSet$'speed_of_car',df_testSet$'distance_of_car',xlab = 'speed_of_car', ylab = 'distance_of_car',main='testSet')
lm_cars_speed_vs_distance<-lm(distance_of_car ~ speed_of_car, df_trainSet)
summary(lm_cars_speed_vs_distance)
predict_lm_cars_vs_distance <- predict(lm_cars_speed_vs_distance,df_testSet)
print("predictions:")
predict_lm_cars_vs_distance
plot(df_cars$speed_of_car, df_cars$distance_of_car, xlab = 'speed of car', ylab = 'distance of car')
abline(lm(distance_of_car ~ speed_of_car, df_trainSet))
install.packages(readr) # Original Code
install.packages('readr') # New Code | Note: make sure you use quotes when calling a package
library(“readr”) # Original Code
install.packages("readr")
install.packages("readr")
plot(df_cars$speed_of_car, df_cars$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='blue')
abline(lm(distance_of_car ~ speed_of_car, df_trainSet))
install.packages('readr')
library(readr)
df_cars<- read_csv("R Tutorial Data Sets/cars.csv");
View(df_cars)
print(df_cars)
df_iris<- read_csv("R Tutorial Data Sets/iris.csv")
df_iris <- subset(df_iris, select = -c(X1))
View(df_iris)
print(df_iris)
Get_to_know_data <- function(DatasetName){
print(paste("GET TO KNOW: ",deparse(substitute(DatasetName))))
print('fetching attributes...')
print(attributes(DatasetName) )#List your attributes within your data set.
print('fetching summary...')
print(summary(DatasetName) )#Prints the min, max, mean, median, and quartiles of each attribute.
print('fetching data structure...')
print(str(DatasetName) )#Displays the structure of your data set.
print('fetching data attribute names...')
print(names(DatasetName) )#Names your attributes within your data set.
#DatasetName$ColumnName #Will print out the instances within that particular column in your data set.
}
Get_to_know_data(df_cars)
Get_to_know_data(df_iris)
plot_summary_of_data<-function(DatasetName,x_index=1){
column_names = names(DatasetName)
subplot_cols = 2
subplot_rows = 2
par(mfrow=c(subplot_rows,subplot_cols))
x <- unlist(DatasetName[,x_index])
x_header = column_names[x_index]
for(i in 1:length(column_names)){
y <- unlist(DatasetName[,i])
y_header = column_names[i]
try(hist(y, main = paste(y_header, "Histogram"), xlab = y_header ),silent=TRUE)#Histogram Plot
}
for(i in 1:length(column_names)){
if(i != x_index) {
y <- unlist(DatasetName[,i])
y_header = column_names[i]
try(plot(x,y, xlab = x_header, ylab = y_header),silent=TRUE)  #Scatter (Box) Plot
}
}
#Normal Quantile Plot- is a way to see if your data is normally distributed.
for(i in 1:length(column_names)){
y <- unlist(DatasetName[,i])
y_header = column_names[i]
try(qqnorm(y,main = paste(y_header, " Normal Q-Q Plot")),silent=TRUE) ##Normal Quantile Plot
}
}
plot_summary_of_data(df_cars,x_index=2)
plot_summary_of_data(df_iris,x_index=1)
#DatasetName$ColumnName<-as.typeofdata(DatasetName$ColumnName)
df_cars$"name of car"<-as.factor(df_cars$"name of car")
df_iris$"Species"<-as.factor(df_iris$"Species")
reformat_column_headers <- function(DatasetName){
column_names = names(DatasetName)
column_names_reformated = gsub(" ","_",fixed=TRUE,column_names)
names(DatasetName)<-c(column_names_reformated)
return(DatasetName)
}
df_cars = reformat_column_headers(df_cars)
print(names(df_cars))
df_iris = reformat_column_headers(df_iris)
print(names(df_iris))
summary(df_cars) #Will count how many NA’s you have.
summary(df_iris)
is.na(df_cars) #Will show your NA’s through logical data. (TRUE if it’s missing, FALSE if it’s not.)
na.omit(df_cars)#Drops any rows with missing values and omits them forever.
na.omit(df_iris)
#na.exclude(DatasetName$ColumnName)#Drops any rows with missing values, but keeps track of where they were.
#DatasetName$ColumnName[is.na(DatasetName$ColumnName)]<-mean(DatasetName$ColumnName,na.rm = TRUE)
set.seed(1)
train_test_size<-function(DatasetName,training_size_ratio=0.7){
trainSize<-round(nrow(DatasetName)*training_size_ratio)
testSize<-nrow(DatasetName)-trainSize
df_out = data.frame('trainSize'=c(trainSize),'testSize'=c(testSize))
return(df_out)
}
train_test_size(df_cars,0.7)
train_test_size(df_iris,0.7)
train_test_split<-function(DatasetName,training_size_ratio=0.7){
df_train_test_size <- train_test_size(df_cars,training_size_ratio)  #get train test sizes
trainSize<-df_train_test_size[1,1]
training_indices<-sample(seq_len(nrow(DatasetName)),size = trainSize)
trainSet<-DatasetName[training_indices,]
testSet<-DatasetName[-training_indices,]
return(list(trainSet,testSet))
}
list_df_train_test_sets = train_test_split(df_cars,0.7)
df_trainSet = list_df_train_test_sets[[1]]
print(df_trainSet)
df_testSet = list_df_train_test_sets[[2]]
print(df_testSet)
plot(df_cars$'speed_of_car',df_cars$'distance_of_car',xlab = 'speed_of_car', ylab = 'distance_of_car',main='training+test set')
plot(df_trainSet$'speed_of_car',df_trainSet$'distance_of_car',xlab = 'speed_of_car', ylab = 'distance_of_car',main='df_trainSet')
plot(df_testSet$'speed_of_car',df_testSet$'distance_of_car',xlab = 'speed_of_car', ylab = 'distance_of_car',main='testSet')
lm_cars_speed_vs_distance<-lm(distance_of_car ~ speed_of_car, df_trainSet)
summary(lm_cars_speed_vs_distance)
predict_lm_cars_vs_distance <- predict(lm_cars_speed_vs_distance,df_testSet)
print("predictions:")
predict_lm_cars_vs_distance
plot(df_cars$speed_of_car, df_cars$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='blue')
abline(lm(distance_of_car ~ speed_of_car, df_trainSet))
install.packages(readr) # Original Code
install.packages('readr') # New Code | Note: make sure you use quotes when calling a package
library(“readr”) # Original Code
install.packages("readr")
install.packages("readr")
prediction #new code
plot(IrisDataset$Petal.Length, df_cars$Petal.Width, xlab = 'Petal.Length', ylab = 'dPetal.Width', col='blue')
abline(lm(Petal.Width ~ Petal.Length,trainSet))
library(readr) # New Code | Note: reference by unquoted name when reading library package.
IrisDataset <- read.csv(iris.csv) # Original Code
IrisDataset <- read.csv("R Tutorial Data Sets/iris.csv") # New Code | Note: point to directory location using quotes
attributes(IrisDataset) #Original code
summary(risDataset) #Original code
summary(IrisDataset) # new code | note: missing "I" at start of "iris..."
str(IrisDatasets) # Original code
str(IrisDataset) # new code | typo
names(IrisDataset) #original code
hist(IrisDataset$Species) #original code
hist(IrisDataset$Sepal.Length) #new code | histogram can only accept numeric columns
plot(IrisDataset$Sepal.Length #original code
plot(IrisDataset$Sepal.Length) #new code | missing end bracket
qqnorm(IrisDataset) #original code
qqnorm(IrisDataset$Sepal.Length) #original code | must select a specific numeric column for Q-Q plot
IrisDataset$Species<- as.numeric(IrisDataset$Species)  # original code
set.seed(123) # original code
trainSize <- round(nrow(IrisDataset) * 0.2)# original code
trainSize
testSize <- nrow(IrisDataset) - trainSet # original code
testSize <- round(nrow(IrisDataset)) - trainSize # new code | replace trainSet with trainSize
testSize
trainSizes # orgiinal code
trainSize # new code | drop "s" from original code
testSize #original code
trainSet <- IrisDataset[training_indices, ] #original code
testSet <- IrisDataset[-training_indices, ]#original code
set.seed(405)#original code
trainSet <- IrisDataset[training_indices, ] #original code (repreated previously)
testSet <- IrisDataset[-training_indices, ] #original code (repreated previously)
LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length) #original code
LinearModel<- lm(Petal.Width ~ Petal.Length, trainSet) #new code | both data sets must come from same data frame
prediction<-predict(LinearModeltestSet) #orignal code
prediction<-predict(LinearModel,testSet) #new code
predictions #original code
prediction #new code
plot(IrisDataset$Petal.Length, df_cars$Petal.Width, xlab = 'Petal.Length', ylab = 'dPetal.Width', col='blue')
abline(lm(Petal.Width ~ Petal.Length,trainSet))
plot(IrisDataset$Petal.Length, IrisDataset$Petal.Width, xlab = 'Petal.Length', ylab = 'dPetal.Width', col='blue')
abline(lm(Petal.Width ~ Petal.Length, trainSet))
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'dPetal.Width', col='red')
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red)
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'dPetal.Width', col='red')
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'dPetal.Width', col='red')
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'dPetal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'Petal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, testSet$distance_of_car,col='blue')
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 0)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, testSet$distance_of_car,col='blue')
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 0)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(1, 95, legend=c("trainSet", "LinearModel","TestSet"),
col=c("red", "red","blue"), lty=1:2, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend( legend=c("trainSet", "LinearModel","TestSet"),
col=c("red", "red","blue"), lty=1:2, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("trainSet", "LinearModel","TestSet"),
col=c("red", "red","blue"), lty=1:2, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=1:2, cex=0.9)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=1:2, cex=2)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=1:2, cex=1)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=1:2, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=1:3, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=1:1, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=1:2, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=1:4, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=1, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=2, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=3, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=4, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=5, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), lty=19, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"), cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend(5, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1, cex=0.8)
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'Petal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
legend(5, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1, cex=0.8)
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'Petal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
legend(5, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1, cex=0.8)
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'Petal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
legend(5, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1:2, cex=0.8)
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'Petal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1:2, cex=0.8)
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'Petal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
legend(10, 95, legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1:2, cex=0.8)
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'Petal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
legend("topleft", legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1:2, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend("topleft", legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1, cex=0.8)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend("topleft", legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1, cex=1)
plot(df_trainSet$speed_of_car, df_trainSet$distance_of_car, xlab = 'speed of car', ylab = 'distance of car', col='red',pch = 19)
abline(lm(distance_of_car ~ speed_of_car, df_trainSet),col='red')
points(df_testSet$speed_of_car, df_testSet$distance_of_car,col='blue')
legend("topleft", legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1, cex=.9)
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'Petal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
legend("topleft", legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1:2, cex=0.9)
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'Petal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
legend("topleft", legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1, cex=0.9)
install.packages(readr) # Original Code
install.packages('readr') # New Code | Note: make sure you use quotes when calling a package
install.packages("readr")
library(“readr”) # Original Code
#library(“readr”) # Original Code
#Error: unexpected input in "library(�"
#library(“readr”) # Original Code
#Error: unexpected input in "library(�"
library(readr) # New Code | Note: reference by unquoted name when reading library package.
IrisDataset <- read.csv(iris.csv) # Original Code
#IrisDataset <- read.csv(iris.csv) # Original Code
#Error in read.table(file = file, header = header, sep = sep, quote = quote, : object 'iris.csv' not found
IrisDataset <- read.csv("R Tutorial Data Sets/iris.csv") # New Code | Note: point to directory location using quotes
attributes(IrisDataset) #Original code
summary(risDataset) #Original code
#summary(risDataset) #Original code
#Error in summary(risDataset) : object 'risDataset' not found
summary(IrisDataset) # new code | note: missing "I" at start of "iris..."
str(IrisDatasets) # Original code
str(IrisDatasets) # Original code
# str(IrisDatasets) # Original code
# Error in str(IrisDatasets) : object 'IrisDatasets' not found
str(IrisDataset) # new code | typo
names(IrisDataset) #original code
hist(IrisDataset$Species) #original code
hist(IrisDataset$Species) #original code
# hist(IrisDataset$Species) #original code
# Error in hist.default(IrisDataset$Species) : 'x' must be numeric
hist(IrisDataset$Sepal.Length) #new code | histogram can only accept numeric columns
plot(IrisDataset$Sepal.Length #original code
# plot(IrisDataset$Sepal.Length #original code
# Error: Incomplete expression: plot(IrisDataset$Sepal.Length #original code
# plot(IrisDataset$Sepal.Length #original code
# Error: Incomplete expression: plot(IrisDataset$Sepal.Length #original code
plot(IrisDataset$Sepal.Length) #new code | missing end bracket
qqnorm(IrisDataset) #original code
#qqnorm(IrisDataset) #original code
#Error in FUN(X[[i]], ...) : only defined on a data frame with all numeric variables
qqnorm(IrisDataset$Sepal.Length) #original code | must select a specific numeric column for Q-Q plot
IrisDataset$Species<- as.numeric(IrisDataset$Species)  # original code
set.seed(123) # original code
trainSize <- round(nrow(IrisDataset) * 0.2)# original code
trainSize
testSize <- nrow(IrisDataset) - trainSet # original code
testSize <- round(nrow(IrisDataset)) - trainSize # new code | replace trainSet with trainSize
testSize
trainSizes # orgiinal code
testSize <- nrow(IrisDataset) - trainSet # original code
testSize
trainSizes # orgiinal code
# trainSizes # orgiinal code
# Error: object 'trainSizes' not found
# trainSizes # orgiinal code
# Error: object 'trainSizes' not found
trainSize # new code | drop "s" from original code
testSize #original code
testSize <- round(nrow(IrisDataset)) - trainSize # new code | replace trainSet with trainSize
testSize
testSize #original code
trainSet <- IrisDataset[training_indices, ] #original code
#new code
training_indices<-sample(seq_len(nrow(IrisDataset)),size = trainSize) #get indices
trainSet<-IrisDataset[training_indices,]
print(trainSet)
testSet <- IrisDataset[-training_indices, ]#original code
set.seed(405)#original code
trainSet <- IrisDataset[training_indices, ] #original code (repreated previously)
testSet <- IrisDataset[-training_indices, ] #original code (repreated previously)
LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length) #original code
LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length) #original code
# LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length) #original code
# Error in eval(predvars, data, env) : object 'testingSet' not found
# LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length) #original code
# Error in eval(predvars, data, env) : object 'testingSet' not found
LinearModel<- lm(Petal.Width ~ Petal.Length, trainSet) #new code | both data sets must come from same data frame
# LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length) #original code
# Error in eval(predvars, data, env) : object 'testingSet' not found
LinearModel<- lm(Petal.Width ~ Petal.Length, trainSet) #new code | both data sets must come from same data frame
summary(LinearModel) # original code
prediction<-predict(LinearModeltestSet) #orignal code
# prediction<-predict(LinearModeltestSet) #orignal code
# Error in predict(LinearModeltestSet) : object 'LinearModeltestSet' not found
# prediction<-predict(LinearModeltestSet) #orignal code
# Error in predict(LinearModeltestSet) : object 'LinearModeltestSet' not found
prediction<-predict(LinearModel,testSet) #new code
predictions #original code
# predictions #original code
# Error: object 'predictions' not found
# predictions #original code
# Error: object 'predictions' not found
prediction #new code
plot(trainSet$Petal.Length, trainSet$Petal.Width, xlab = 'Petal.Length', ylab = 'Petal.Width', col='red',pch = 19)
abline(lm(Petal.Width ~ Petal.Length, trainSet),col='red')
points(testSet$Petal.Length, testSet$Petal.Width,col='blue')
legend("topleft", legend=c("TrainSet & Linear Model","TestSet"),
col=c("red","blue"),lty=1, cex=0.9)
